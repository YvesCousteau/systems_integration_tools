{"ast":null,"code":"var _jsxFileName = \"/home/rpi-server/systems_integration_tools/software/webRTC/client_JS/src/screens/CallScreen.tsx\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router-dom\";\nimport { useRef, useEffect } from \"react\";\nimport socketio from \"socket.io-client\";\nimport \"./CallScreen.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CallScreen() {\n  _s();\n  const params = useParams();\n  const localUsername = params.username;\n  const roomName = params.room;\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const socket = socketio(\"https://signaling-server-flask.herokuapp.com/\", {\n    autoConnect: false\n  });\n  let pc; // For RTCPeerConnection Object\n\n  const sendData = data => {\n    socket.emit(\"data\", {\n      username: localUsername,\n      room: roomName,\n      data: data\n    });\n  };\n  const startConnection = () => {\n    navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        height: 350,\n        width: 350\n      }\n    }).then(stream => {\n      console.log(\"Local Stream found\");\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n      socket.connect();\n      socket.emit(\"join\", {\n        username: localUsername,\n        room: roomName\n      });\n    }).catch(error => {\n      console.error(\"Stream not found: \", error);\n    });\n  };\n  const onIceCandidate = event => {\n    if (event.candidate) {\n      console.log(\"Sending ICE candidate\");\n      sendData({\n        type: \"candidate\",\n        candidate: event.candidate\n      });\n    }\n  };\n  const onTrack = event => {\n    console.log(\"Adding remote track\");\n    remoteVideoRef.current.srcObject = event.streams[0];\n  };\n  const createPeerConnection = () => {\n    try {\n      pc = new RTCPeerConnection({});\n      pc.onicecandidate = onIceCandidate;\n      pc.ontrack = onTrack;\n      const localStream = localVideoRef.current.srcObject;\n      for (const track of localStream.getTracks()) {\n        pc.addTrack(track, localStream);\n      }\n      console.log(\"PeerConnection created\");\n    } catch (error) {\n      console.error(\"PeerConnection failed: \", error);\n    }\n  };\n  const setAndSendLocalDescription = sessionDescription => {\n    pc.setLocalDescription(sessionDescription);\n    console.log(\"Local description set\");\n    sendData(sessionDescription);\n  };\n  const sendOffer = () => {\n    console.log(\"Sending offer\");\n    pc.createOffer().then(setAndSendLocalDescription, error => {\n      console.error(\"Send offer failed: \", error);\n    });\n  };\n  const sendAnswer = () => {\n    console.log(\"Sending answer\");\n    pc.createAnswer().then(setAndSendLocalDescription, error => {\n      console.error(\"Send answer failed: \", error);\n    });\n  };\n  const signalingDataHandler = data => {\n    if (data.type === \"offer\") {\n      createPeerConnection();\n      pc.setRemoteDescription(new RTCSessionDescription(data));\n      sendAnswer();\n    } else if (data.type === \"answer\") {\n      pc.setRemoteDescription(new RTCSessionDescription(data));\n    } else if (data.type === \"candidate\") {\n      pc.addIceCandidate(new RTCIceCandidate(data.candidate));\n    } else {\n      console.log(\"Unknown Data\");\n    }\n  };\n  socket.on(\"ready\", () => {\n    console.log(\"Ready to Connect!\");\n    createPeerConnection();\n    sendOffer();\n  });\n  socket.on(\"data\", data => {\n    console.log(\"Data received: \", data);\n    signalingDataHandler(data);\n  });\n  useEffect(() => {\n    startConnection();\n    return function cleanup() {\n      var _pc;\n      (_pc = pc) === null || _pc === void 0 ? void 0 : _pc.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Username: \" + localUsername\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Room Id: \" + roomName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      autoPlay: true,\n      muted: true,\n      playsInline: true,\n      ref: localVideoRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      autoPlay: true,\n      muted: true,\n      playsInline: true,\n      ref: remoteVideoRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(CallScreen, \"HGSZmIxTyLnKiTsHoAt3ooBwGsI=\", false, function () {\n  return [useParams];\n});\n_c = CallScreen;\nexport default CallScreen;\nvar _c;\n$RefreshReg$(_c, \"CallScreen\");","map":{"version":3,"names":["useParams","useRef","useEffect","socketio","jsxDEV","_jsxDEV","CallScreen","_s","params","localUsername","username","roomName","room","localVideoRef","remoteVideoRef","socket","autoConnect","pc","sendData","data","emit","startConnection","navigator","mediaDevices","getUserMedia","audio","video","height","width","then","stream","console","log","current","srcObject","connect","catch","error","onIceCandidate","event","candidate","type","onTrack","streams","createPeerConnection","RTCPeerConnection","onicecandidate","ontrack","localStream","track","getTracks","addTrack","setAndSendLocalDescription","sessionDescription","setLocalDescription","sendOffer","createOffer","sendAnswer","createAnswer","signalingDataHandler","setRemoteDescription","RTCSessionDescription","addIceCandidate","RTCIceCandidate","on","cleanup","_pc","close","children","fileName","_jsxFileName","lineNumber","columnNumber","autoPlay","muted","playsInline","ref","_c","$RefreshReg$"],"sources":["/home/rpi-server/systems_integration_tools/software/webRTC/client_JS/src/screens/CallScreen.tsx"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useRef, useEffect } from \"react\";\nimport socketio from \"socket.io-client\";\nimport \"./CallScreen.css\";\n\nfunction CallScreen() {\n    const params = useParams();\n    const localUsername = params.username;\n    const roomName = params.room;\n    const localVideoRef = useRef(null);\n    const remoteVideoRef = useRef(null);\n\n    const socket = socketio(\"https://signaling-server-flask.herokuapp.com/\", {\n        autoConnect: false,\n    });\n\n    let pc; // For RTCPeerConnection Object\n\n    const sendData = (data) => {\n        socket.emit(\"data\", {\n        username: localUsername,\n        room: roomName,\n        data: data,\n        });\n    };\n\n    const startConnection = () => {\n        navigator.mediaDevices.getUserMedia({\n            audio: false,\n            video: { height: 350, width: 350 },\n        }).then((stream) => {\n            console.log(\"Local Stream found\");\n            if (localVideoRef.current) {\n                localVideoRef.current.srcObject = stream;\n            }\n            socket.connect();\n            socket.emit(\"join\", { username: localUsername, room: roomName });\n        }).catch((error) => {\n            console.error(\"Stream not found: \", error);\n        });\n    };\n    const onIceCandidate = (event) => {\n        if (event.candidate) {\n            console.log(\"Sending ICE candidate\");\n            sendData({\n                type: \"candidate\",\n                candidate: event.candidate,\n            });\n        }\n    };\n    \n    const onTrack = (event) => {\n        console.log(\"Adding remote track\");\n        remoteVideoRef.current.srcObject = event.streams[0];\n    };\n    \n    const createPeerConnection = () => {\n        try {\n            pc = new RTCPeerConnection({});\n            pc.onicecandidate = onIceCandidate;\n            pc.ontrack = onTrack;\n            const localStream = localVideoRef.current.srcObject;\n            for (const track of localStream.getTracks()) {\n                pc.addTrack(track, localStream);\n            }\n            console.log(\"PeerConnection created\");\n        } catch (error) {\n            console.error(\"PeerConnection failed: \", error);\n        }\n    };\n\n    const setAndSendLocalDescription = (sessionDescription) => {\n        pc.setLocalDescription(sessionDescription);\n        console.log(\"Local description set\");\n        sendData(sessionDescription);\n    };\n    \n    const sendOffer = () => {\n        console.log(\"Sending offer\");\n        pc.createOffer().then(setAndSendLocalDescription, (error) => {\n            console.error(\"Send offer failed: \", error);\n        });\n    };\n    \n    const sendAnswer = () => {\n        console.log(\"Sending answer\");\n        pc.createAnswer().then(setAndSendLocalDescription, (error) => {\n            console.error(\"Send answer failed: \", error);\n        });\n    };\n    const signalingDataHandler = (data) => {\n        if (data.type === \"offer\") {\n            createPeerConnection();\n            pc.setRemoteDescription(new RTCSessionDescription(data));\n            sendAnswer();\n        } else if (data.type === \"answer\") {\n            pc.setRemoteDescription(new RTCSessionDescription(data));\n        } else if (data.type === \"candidate\") {\n            pc.addIceCandidate(new RTCIceCandidate(data.candidate));\n        } else {\n            console.log(\"Unknown Data\");\n        }\n    };\n    socket.on(\"ready\", () => {\n        console.log(\"Ready to Connect!\");\n        createPeerConnection();\n        sendOffer();\n    });\n    \n      socket.on(\"data\", (data) => {\n        console.log(\"Data received: \", data);\n        signalingDataHandler(data);\n    });\n    \n    useEffect(() => {\n        startConnection();\n        return function cleanup() {\n            pc?.close();\n        };\n    }, []);\n    \n\treturn (\n    <div>\n      <label>{\"Username: \" + localUsername}</label>\n      <label>{\"Room Id: \" + roomName}</label>\n      <video autoPlay muted playsInline ref={localVideoRef} />\n      <video autoPlay muted playsInline ref={remoteVideoRef} />\n    </div>\n  );\n}\n\nexport default CallScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}